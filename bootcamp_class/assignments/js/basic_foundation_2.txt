// 1. Biggie Size - Given an array, write a function that changes all positive numbers in the array to "big".  
// Example: makeItBig([-1,3,5,-5]) returns that same array, changed to [-1, "big", "big", -5].
function makeItBig(array){
  let newArray = [];
  for(var i = 0; i < array.length; i++){
    if(array[i] > 0){
      array[i] = 'big';
    }
    newArray.push(array[i]);
  }
  return newArray;
}
// console.log(makeItBig([-1,3,5,-5]));

// 2. Print Low, Return High - Create a function that takes array of numbers.  
// The function should print the lowest value in the array, and return the highest value in the array.
function printLowReturnHigh(array){
  let low = array[0]
  let high = array[0];
  for(var i = 0; i < array.length; i++){
    if(array[i] > high){
      high = array[i];
    }
    if(array[i] < low){
      low = array[i];
    }
  }
  let highValue = 'The high value is: ' + high;
  console.log('The low array value is:', low);
  return highValue;
}
// Test cases
// console.log(printLowReturnHigh([-2, 4, 10, 20]));

// 3. Print One, Return Another - Build a function that takes array of numbers.  
// The function should print second-to-last value in the array, and return first odd value in the array.
function printOneReturnAnother(array){
  // determine the 2nd to last array value
  var secondToLast = array[array.length - 2];
  console.log('The 2nd to last value is: ' + secondToLast);
  // iterate through the array values
  for(var i = 0; i < array.length; i++){
    // determine the first odd array value
    if(array[i] % 2 !== 0){
      console.log('The 1st odd value is: ');
      // return the array[i] before the for loop 
      // repeats past the 1st successful match
      return array[i]; 
    }
  }
}
// Test cases
// console.log(printOneReturnAnother([-2,1,4,5,10,20]));

function printOneReturnAnother2(array) {
  var odds = array.filter(function(num) {
    return num % 2
  });
  var evens = array.filter(function(num) {
    return !(num % 2)
  });
  return evens.length == 1 ? evens[0] : odds[0];
}
// Test cases
// console.log(printOneReturnAnother2([-2,1,4,5,10,20]));  // Expected result =>

// 4. Double Vision - Given array, create a function to return a new array where each value in the original has been doubled.  
// Calling double([1,2,3]) should return [2,4,6] without changing original.
function doubleArrayValues(array){
  let newArray = [];
  for(var i = 0; i < array.length; i++){
    newArray.push(array[i] * array[i]);
  }
  return newArray;
}
// Test cases
// console.log(doubleArrayValues([1,2,3,4,5]));
// console.log(doubleArrayValues([1,"Coding",3,4,"Dojo"]));

// 5. Count Positives - Given array of numbers, create function to replace last value with number of positive values.  
// Example, countPositives([-1,1,1,1]) changes array to [-1,1,1,3] and returns it.
function countPositives(array){
  let count = 0;
  for(var i = 0; i < array.length; i++){
    if(array[i] > 0){
      count++;
    }
    array[array.length - 1] = count;
  }
  return array;
}
// Test cases
// console.log(countPositives([-1,1,1,1]));

// 6. Evens and Odds - Create a function that accepts an array.  Every time that array has three odd values in a row, print "That's odd!".  
// Every time the array has three evens in a row, print "Even more so!"
function findEvensAndOdds(array){
  let oddCount = 0;
  let evenCount = 0;
  for(var i = 0; i < array.length; i++){
    // determine odd values
    if(array[i] % 2 !== 0){
      // determine three in a row
      oddCount++
      evenCount = 0;
    }
    // determine even values 
    else { // determine three in a row
      // increment the evenCount
      evenCount++
      oddCount = 0;
    }
    // check the count to see if three in a row - even
    if(evenCount === 3){
      // if the count is equal to 3, reset count to 0
      evenCount = 0;
      console.log("Even more so!");
    }
    // check the count to see if three in a row - odd
    if(oddCount === 3){
      oddCount = 0;
      console.log("That's odd!");
    }
  }
  // return the array
  return array;
}
// Test cases
console.log(findEvensAndOdds([1,2,3,5,7,4,6,8,10,15,20]));  // Expected output => That's odd!, Even more so!
console.log(findEvensAndOdds([1,3,5,7,9,11,15,17,19]));     // Expected output => That's odd!, That's odd!, That's odd!

// 7. Increment the Seconds - Given an array of numbers arr, add 1 to every second element, specifically those whose index is odd (arr[1], [3], [5], etc).  
// Afterward. console.log each array value and return arr.
function incrementTheSeconds(array){
  let count = 0;
  // iterate through the array values
  for(var i = 0; i < array.length; i++){
    if(i % 2 !== 0){
      array[i] += 1;
    }
    console.log(array[i]);
  }
  return array;
}
// Test cases
console.log(incrementTheSeconds([1,3,5,7,9,11,13]));  // Expected output => [1,4,5,8,9,13]

// 8. Previous Lengths - You are passed an array containing strings.  Working within that same array, 
// replace each string with a number - the length of the string at previous array index - and return the array.  
// For example, previousLengths(["hello", "dojo", "awesome"]) should return ["hello", 5, 4].
function previousLengths(array){
  // loop through the provided array values
  //[set i = to last index];[don't want to reach 0];[decrement i] 
  for(let i = array.length - 1; i > 0; i--){
    // debugger;
    // determine length of the index before i, 
    // set array[i] to equal the length of the previous index
    array[i] = array[i - 1].length;
  }
  return array;
}
// Test cases
console.log(previousLengths(["hello", "dojo", "awesome"]));  // Expected result => ["hello", 5, 4]


// 9. Add Seven to Most - Build function that accepts array. 
// Return a new array with all values except first, adding 7 to each. 
// Do not alter the original array.
function addSevenToMost(array){
  // create an empty array placeholder
  let newArray = [];
  // loop through the array, skipping the first value
  for(let i = 1; i < array.length; i++){  // or do I manipulate the parameters here to excise the first array[0] index?
    newArray.push(array[i] + 7);
  }
  // return the new array
  return newArray;
}
console.log(addSevenToMost([1,3,13,23]));  // Expected result => [10,20,30]

// 10. Reverse Array - Given an array, write a function that reverses values, in-place.  
// Example: reverse([3,1,6,4,2]) return same array, containing [2,4,6,1,3].  
// Do this without creating an empty temporary array.  (Hint: you'll need to swap values).
function reverseArray(array){
  for(let i = 0; i < array.length / 2; i++){
    let temp = array[i];
    // set array index to array index (length minus 1 minus i)
    array[i] = array[array.length - 1 - i];
    // assign back to temp
    array[array.length - 1 - i] = temp;
    // determine swap values
    // [1, 2, 3, 4, 5, 6]
    //  ^. ^        ^  ^
  }
  return array;
}
// Test cases
console.log(reverseArray([3,1,6,4,2]));         // Expected result => [2,4,6,1,3]
console.log(reverseArray([true,1,6,4,pizza]));  // Expected result => [pizza,4,6,1,true]

// 11. Outlook: Negative - Given an array, create and return a new one containing all the values of the provided array, made negative (not simply multiplied by -1). 
// Given [1,-3,5], return [-1,-3,-5].
function outlookNegative(array){
  let newArray = [];
  for(let i = 0; i < array.length; i++){
    // if(array[i] > 0){
    //   newArray.push(array[i] * -1);
    // } else {
    //   newArray.push(array[i]);
    // }
    newArray.push(array[i] > 0 ? -array[i] : array[i]);
  }
  return newArray;
}
// Test cases 
console.log(outlookNegative([1,-3,5]));  // Expected result => [-1,-3,-5]
console.log(outlookNegative([1,2,-3,3,-4,5]));  // Expected result => [-1,-2,-3,-3,-5]

// 12. Always Hungry - Create a function that accepts an array, and prints "yummy" each time one of the values is equal to "food".  
// If no array elements are "food", then print "I'm hungry" once.
function alwaysHungry(array){
  let hungry = true;
  // let foodMsg;
  // iterate through the array values
  for(let i = 0; i < array.length; i++){
    // for each element equal to "food", change to yummy
    if (array[i] === 'food'){
      // foodMsg = 'food';
      console.log('yummy');
      hungry = false;
    }
  }
  if(hungry){
    console.log("I\'m hungry");
  }
  // if no array elements are "food", print "I'm hungry" only once
  return array;
}
// Test cases
console.log(alwaysHungry(['food','drink','soda','food','drink']));
console.log(alwaysHungry(['rocks','air','water']));


// 13. Swap Toward the Center - Given array, swap first and last, third and third-to-last, etc.  
// Input[true,42,"Ada",2,"pizza"] becomes ["pizza", 42, "Ada", 2, true].  Change [1,2,3,4,5,6] to [6,2,4,3,5,1].
function swapTowardsTheCenter(array){
  // let newArray = [...array];
  // loop through the array values
  for(let i = 0; i < array.length / 2; i+=2){
    let temp = array[i];
    // set array index to array index (length minus 1 minus i)
    array[i] = array[array.length - 1 - i];
    // assign back to temp
    array[array.length - 1 - i] = temp;
    // determine swap values
    // [1, 2, 3, 4, 5, 6]
    //  ^. ^        ^  ^
  }
  return array;
}
// Test cases
console.log(swapTowardsTheCenter([true,42,"Ada",2,"pizza"]));


// 14. Scale the Array - Given an array arr and a number num, multiply all values in arr by num, and return the changed array arr.  
// For example, scaleArray([1,2,3],3) should return [3,6,9].
function scaleTheArray(array, N){
  let newArray = [];
  for(var i = 0; i < array.length; i++){
    newArray.push(array[i] * N);
  }
  return newArray;
}
// console.log(scaleTheArray([2,3,4], 3));  // Expected result => [6,9,12]